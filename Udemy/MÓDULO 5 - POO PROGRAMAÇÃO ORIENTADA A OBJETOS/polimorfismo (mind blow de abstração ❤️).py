# Polimorfismo em Python Orientado a Objetos
# Polimorfismo √© o princ√≠pio que permite que
# classes deridavas de uma mesma superclasse (classes que herdam)
# tenham m√©todos iguais (com mesma assinatura)
# mas comportamentos diferentes.
# Assinatura do m√©todo = Mesmo nome e quantidade de parametros (assinatura √© tudo que tem no m√©todo)
# de par√¢metros (retorno n√£o faz parte da assinatura)
# Opini√£o + princ√≠pios que contam:
# Assinatura do m√©todo: nome, par√¢metros e retorno iguais

# SO"L"ID - cada letra nesse SOLID representa um princ√≠pio

# Princ√≠pio da substitui√ß√£o de liskov
# Objetos de uma superclasse devem ser substitu√≠veis
# por objetos de uma subclasse sem quebrar a aplica√ß√£o.

#onde voc√™ usar uma super classe, qualquer subclasse dessa classe deve utilizar o m√©todo

#exemplo √© o exerciocio de Mixin no log

# Sobrecarga de m√©todos (overload) üêç = ‚ùå (o python n√£o suporta)
# Sobreposi√ß√£o de m√©todos (override) üêç = ‚úÖ

from abc import ABC, abstractmethod
class Notification(ABC):
    def __init__(self, msg) -> None:  #O init sempre retorna None,  a setinha indica quq deve retornar (pro python nn significa nada ksksk mas mostra pra quem √© dev o que a fun√ß√£o retorna) Type Anotations | Type Hintinng
        self.msg = msg

#o que √© uma notifica√ß√£o? pode ser uma mensagem, pode ser uma multa, pode ser uma oferta
# percebe que isso √© algo abstrato

#para saber se um programa √© abstrato ou n√£o se pegunte:
# FAZER O QUE? (CASO DO LOG(VOU LOGAR O QUE?), VOU MANDAR O QUE DE NOTIFICA√á√ÉO?)
    @abstractmethod
    def send_notification(self) -> bool: ... 

class EmailNotification(Notification):
    def send_notification(self) -> bool:
        print('Email: enviando', self.msg)
        return True
    
class WhatsappNotification(Notification):
    def send_notification(self, person = None)-> bool:
        if person:
            print(f'{person} enviou a mensagem: {self.msg}')
            return True
        

n = WhatsappNotification('testando notifica√ß√£o')
n.send_notification('Bia')

# OBSERVA√á√ÉO EXTREMAMENTE IMPORTANTE, os nomer da classe abstrata precisam ser o mesmo se n√£o ele n√£o ir√° instanciar

#apartir daqui de fato vira polimorfismo
def __notificar_exemple(notification: str) : #da mesma forma como a setinha n√£o interfere, esses dois pontos servem apenas para definir o tipo que deve ser esse par√¢metro
    #isso ajuda o vs code a passar os metodos de string pra c√° e indica para outros dev o que a fun√ß√£o deve retornar pra n√£o quebrar o c√≥digo
    notification


def notificar(notification: Notification) : #da mesma forma como a setinha n√£o interfere, esses dois pontos servem apenas para definir o tipo que deve ser esse par√¢metro
    #isso ajuda o vs code a passar os metodos de Notification pra c√° e indica para outros dev o que a fun√ß√£o deve retornar pra n√£o quebrar o c√≥digo
    notificacao_enviada = notification.send_notification()
#se vc passar o curso no m√©todo, vai ver que ele retorna um booleano (coisa que foi definida pela setinha)
    if notificacao_enviada:
        print ("Notificacao enviada")
    else:
        print ("ERRO AO ENVIAR NOTIFICA√á√ÉO")

email_notification = (EmailNotification('Love u'))
notificar(email_notification)

